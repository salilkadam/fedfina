name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: docker.io
  BACKEND_IMAGE: docker4zerocool/fedfina-backend
  FRONTEND_IMAGE: docker4zerocool/fedfina-frontend
  KUBE_NAMESPACE: fedfina

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Python dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        
    - name: Run backend tests
      run: |
        cd backend
        python -m pytest tests/ -v
      env:
        ENV: test
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Run frontend tests
      run: |
        cd frontend
        npm test -- --watchAll=false --coverage
        
    - name: Build frontend
      run: |
        cd frontend
        npm run build

  build-and-push:
    name: Build and Push Docker Images
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}
          ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        
    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  deploy-staging:
    name: Deploy to Staging
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: Configure kubectl for K3s
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.K3S_CONFIG }}" | base64 -d > $HOME/.kube/config
        chmod 600 $HOME/.kube/config
        
    - name: Deploy to staging
      run: |
        # Update image tags in deployment
        sed -i 's|docker.io/docker4zerocool/fedfina-backend:latest|docker.io/docker4zerocool/fedfina-backend:${{ github.sha }}|g' deploy/deployment-staging.yaml
        sed -i 's|docker.io/docker4zerocool/fedfina-frontend:latest|docker.io/docker4zerocool/fedfina-frontend:${{ github.sha }}|g' deploy/deployment-staging.yaml
        
        # Apply deployment
        kubectl apply -f deploy/deployment-staging.yaml
        
        # Wait for deployment to be ready
        kubectl rollout status deployment/fedfina-backend -n fedfina-staging --timeout=300s
        kubectl rollout status deployment/fedfina-frontend -n fedfina-staging --timeout=300s
        
    - name: Health check (Internal)
      run: |
        # Wait for services to be ready
        sleep 30
        
        # Check backend health (internal cluster access)
        kubectl run curl --image=curlimages/curl -i --rm --restart=Never -- \
          curl -f http://fedfina-backend.fedfina-staging.svc.cluster.local:8000/api/v1/health
          
        # Check frontend health (internal cluster access)
        kubectl run curl --image=curlimages/curl -i --rm --restart=Never -- \
          curl -f http://fedfina-frontend.fedfina-staging.svc.cluster.local:3000/
          
    - name: Deployment Summary
      run: |
        echo "üöÄ Staging deployment completed successfully!"
        echo "üìã Deployment Summary:"
        echo "- Backend: fedfina-backend.fedfina-staging.svc.cluster.local:8000"
        echo "- Frontend: fedfina-frontend.fedfina-staging.svc.cluster.local:3000"
        echo "- Namespace: fedfina-staging"
        echo "- Image Tag: ${{ github.sha }}"
        echo ""
        echo "üîç To access the services:"
        echo "1. Connect to your K3s cluster"
        echo "2. Use kubectl port-forward or access via internal network"
        echo "3. Check logs: kubectl logs -n fedfina-staging -l app=fedfina-backend"

  deploy-production:
    name: Deploy to Production
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: Configure kubectl for K3s
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.K3S_CONFIG }}" | base64 -d > $HOME/.kube/config
        chmod 600 $HOME/.kube/config
        
    - name: Deploy to production
      run: |
        # Update image tags in deployment
        sed -i 's|docker.io/docker4zerocool/fedfina-backend:latest|docker.io/docker4zerocool/fedfina-backend:${{ github.sha }}|g' deploy/deployment-v2.yaml
        sed -i 's|docker.io/docker4zerocool/fedfina-frontend:latest|docker.io/docker4zerocool/fedfina-frontend:${{ github.sha }}|g' deploy/deployment-v2.yaml
        
        # Apply deployment
        kubectl apply -f deploy/deployment-v2.yaml
        
        # Wait for deployment to be ready
        kubectl rollout status deployment/fedfina-backend -n fedfina --timeout=300s
        kubectl rollout status deployment/fedfina-frontend -n fedfina --timeout=300s
        
    - name: Health check (Internal)
      run: |
        # Wait for services to be ready
        sleep 30
        
        # Check backend health (internal cluster access)
        kubectl run curl --image=curlimages/curl -i --rm --restart=Never -- \
          curl -f http://fedfina-backend.fedfina.svc.cluster.local:8000/api/v1/health
          
        # Check frontend health (internal cluster access)
        kubectl run curl --image=curlimages/curl -i --rm --restart=Never -- \
          curl -f http://fedfina-frontend.fedfina.svc.cluster.local:3000/
          
    - name: Deployment Summary
      run: |
        echo "üöÄ Production deployment completed successfully!"
        echo "üìã Deployment Summary:"
        echo "- Backend: fedfina-backend.fedfina.svc.cluster.local:8000"
        echo "- Frontend: fedfina-frontend.fedfina.svc.cluster.local:3000"
        echo "- Namespace: fedfina"
        echo "- Image Tag: ${{ github.sha }}"
        echo ""
        echo "üîç To access the services:"
        echo "1. Connect to your K3s cluster"
        echo "2. Use kubectl port-forward or access via internal network"
        echo "3. Check logs: kubectl logs -n fedfina -l app=fedfina-backend"
        echo ""
        echo "üåê If you have internal DNS setup:"
        echo "- Frontend: http://fedfina-s.bionicaisolutions.com (internal network)"
        echo "- API: http://fedfina-s.bionicaisolutions.com/api (internal network)"
